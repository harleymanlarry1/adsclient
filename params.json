{"name":"Adsclient","body":"This is the client implementation of the [Twincat](http://www.beckhoff.com/english.asp?twincat/default.htm) Ads protocol from [Beckhoff](http://http://www.beckhoff.com/).   \r\n(I'm not affiliated with Beckhoff)\r\n\r\nThe implementation is in C# and can be used in silverlight, metro, mono and windows phone projects.\r\n\r\nThere is a library with async and one without.\r\n\r\nAsync is a new feature and is not yet included in .Net 4.\r\nThat's why I added an async dll in the project.\r\nFor compiling this from VS2010 you need to install http://msdn.microsoft.com/en-us/vstudio/gg316360\r\n\r\nThe NoAsync library doesn't require this dll and can be used in mono 2.10.   \r\n(It's the same source, but compiled with the NO_ASYNC directive)\r\n\r\n\r\nGetting started\r\n===============\r\n\r\nAds Route\r\n---------\r\n\r\nFirst you have to give your device/machine the permission to communicate with the Twincat Ads server by adding a route.\r\n\r\nThere are different ways of doing this depending on the device.\r\nYou can use the Twincat Remote Manager for example.\r\nOn a CX9001 device you can connect with cerhost.exe and add a route with \r\n\\Hard Disk\\System\\TcAmsRemoteMgr.exe\r\nThere is also an experimental function AdsClient.AddRoute() for doing this.\r\n\r\n*If the library is not working, an incorrect/missing route may be the problem!.*\r\n\r\nInstallation\r\n------------\r\nYou only need this library.\r\nTwincat is _not_ needed. \r\nIt will not work if you have programs like system manager or PLC control running.\r\n\r\nHere is the NuGet package: https://nuget.org/packages/AdsClient\r\n\r\nMono\r\n----\r\nThe version without the async functions works in Mono 2.10\r\n\r\nMono for android:\r\nRemember to set internet permissions in the manifest.\r\nYou must also configure a route for your android device.\r\n\r\nExternal documentation\r\n----------------------\r\n\r\n[Specification for the ADS/AMS protocol](http://infosys.beckhoff.com/english.php?content=../content/1033/TcAdsAmsSpec/HTML/TcAdsAmsSpec_Intro.htm&id=)\r\n\r\n[Index-Group/Offset specification](http://infosys.beckhoff.com/content/1033/tcadsdeviceplc/html/tcadsdeviceplc_intro.htm?id=11742)\r\n\r\nExamples\r\n========\r\n\r\n## Simple hello machine\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.160.1.1\"))\r\n{\r\n    AdsDeviceInfo deviceInfo = client.ReadDeviceInfo();\r\n    Console.WriteLine(deviceInfo.ToString());\r\n}\r\n```\r\n\r\nAsync version:\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.160.1.1\"))\r\n{\r\n    AdsDeviceInfo deviceInfo = await client.ReadDeviceInfoAsync();\r\n    Console.WriteLine(deviceInfo.ToString());\r\n}\r\n```\r\n\r\nDisposing AdsClient may give you first chance exceptions in the output window.\r\nThis happens because I'm closing the socket while it's listening for ads packets.\r\nThese exceptions are handled in the library and don't cause any problems.\r\n(If someone knows a better way, please let me know)\r\n\r\n## Read/Write a variable by name\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.165.1.1\"))\r\n{\r\n    uint varHandle = client.GetSymhandleByName(\".TestVar\");\r\n    client.Write<byte>(varHandle, 0);\r\n    byte value = client.Read<byte>(varHandle);\r\n    ReleaseSymhandle(varHandle);\r\n}\r\n```\r\n\r\nAsync version:\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.165.1.1\"))\r\n{\r\n    uint varHandle = await client.GetSymhandleByNameAsync(\".TestVar\");\r\n    await client.WriteAsync<byte>(varHandle, 0);\r\n    byte value = await client.ReadAsync<byte>(varHandle);\r\n    await ReleaseSymhandleAsync(varHandle);\r\n}\r\n```\r\n\r\nYou can also use the AdsCommands directly if you need to write directly with IndexGroup/IndexOffset\r\n\r\n## Working with notifications\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.165.1.1\"))\r\n{\r\n  client.OnNotification += (sender, e) => { Console.WriteLine(e.Notification.ToString()); };\r\n  uint hVar1 = client.GetSymhandleByName(\".VarTest1\");\r\n  uint hVar2 = client.GetSymhandleByName(\".VarTest2\");\r\n  uint hNoti1 = client.AddNotification<byte>(hVar1, \r\n                                    AdsTransmissionMode.Cyclic, 2000, null);\r\n  uint hNoti2 = client.AddNotification<byte>(hVar2, \r\n                                    AdsTransmissionMode.OnChange, 10, null);\r\n  Thread.Sleep(5000);\r\n}\r\n```\r\n\r\n## Simple async example with most functions\r\n\r\nHere is an async example.\r\nThe non async functions work the same. (functions without async at the end) \r\nJust remove all the await/async words\r\n\r\n```C#\r\nusing System;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Ads.Client;\r\nusing Ads.Client.Common;\r\n\r\nnamespace AdsTest\r\n{\r\n  class Program\r\n  {\r\n    static void Main(string[] args)\r\n    {\r\n      if (!RunTestAsync().Wait(10000)) \r\n        Console.WriteLine(\"Timeout!\");\r\n      else\r\n        Console.WriteLine(\"done\");\r\n      Console.ReadKey();\r\n    }\r\n\r\n    private static async Task RunTest()\r\n    {\r\n      using (AdsClient client = new AdsClient(\r\n                        amsNetIdSource:\"192.168.5.6.1.1\",  \r\n                        ipTarget:\"192.168.3.4\",       \r\n                        amsNetIdTarget:\"192.168.3.4.1.1\"))  \r\n      {\r\n          AdsDeviceInfo deviceInfo = await client.ReadDeviceInfoAsync();\r\n          Console.WriteLine(\"Device info: \" + deviceInfo.ToString());\r\n\r\n          AdsState state = await client.ReadStateAsync();\r\n          Console.WriteLine(\"State: \" + state.ToString());\r\n\r\n          client.OnNotification += (sender,e) => { \r\n                Console.WriteLine(e.Notification.ToString()); \r\n          };\r\n\r\n          uint varHandle1 = await client.GetSymhandleByNameAsync(\".VariableName1\");\r\n          Console.WriteLine(\"Variable1 handle: \" + varHandle1.ToString());\r\n\r\n          uint varHandle2 = await client.GetSymhandleByNameAsync(\".VariableName2\");\r\n          Console.WriteLine(\"Variable2 handle: \" + varHandle2.ToString());\r\n\r\n          uint notification1Handle = await client.AddNotificationAsync<byte>(\r\n                varHandle1, AdsTransmissionMode.Cyclic, 5000, null);\r\n          uint notification2Handle = await client.AddNotificationAsync<byte>(\r\n                varHandle2, AdsTransmissionMode.OnChange, 10, null);\r\n\r\n          byte value = await client.ReadAsync<byte>(varHandle1);\r\n          Console.WriteLine(\"Value before write: \" + value.ToString());\r\n\r\n          await client.WriteAsync<byte>(varHandle1, 1);\r\n          Console.WriteLine(\"I turned something on\");\r\n\r\n          value = await client.ReadAsync<byte>(varHandle1);\r\n          Console.WriteLine(\"Value after write: \" + value.ToString());\r\n\r\n          await Task.Delay(5000);  //or TaskEx.Delay() in .Net 4\r\n\r\n          await client.WriteAsync<byte>(varHandle1, 0);\r\n          Console.WriteLine(\"I turned something off\");\r\n\r\n          Console.WriteLine(\"Deleting active notifications...\");\r\n          await client.DeleteActiveNotificationsAsync();\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Using commands directly\r\n\r\n```C#\r\nAdsReadStateCommand stateCmd = new AdsReadStateCommand();\r\nstring state = stateCmd.Run(client.Ams).AdsState.ToString();\r\nConsole.WriteLine(\"State: \" + state);\r\n```\r\n\r\n## Special functions\r\n\r\nThese functions aren't documented by Beckhoff:\r\n\r\n### Add route on target\r\n\r\nThis code may not work because it is not documented as far as I know. Use at own  risk.\r\nThe default username is 'Administrator' with an empty password.\r\nThe address can be an ip number or the dns name.\r\n\r\n```C#\r\nAdsSpecial.AddRoute(\r\n    amsNetIdSource: \"10.0.0.120.1.1\", \r\n    ipTarget: \"10.0.0.2\", \r\n    routeName: \"routename\", \r\n    address: \"10.0.0.2\",\r\n    username: \"user\",\r\n    passwd: \"secret\");\r\n```\r\nor\r\n\r\n```C#\r\nAdsSpecial.AddRoute(\r\n    amsNetIdSource: \"10.0.0.120.1.1\", \r\n    ipTarget: \"10.0.0.2\", \r\n    routeName: \"routename\", \r\n    address: \"laptop1\");\r\n```\r\n\r\n### Get target description\r\n\r\n```C#\r\nusing (AdsClient client = new AdsClient(\r\n        amsNetIdSource: \"10.0.0.120.1.1\",\r\n        ipTarget: \"10.0.0.2\",\r\n        amsNetIdTarget: \"5.1.204.130.1.1\"))\r\n{\r\n  string xml = adsClient.Special.GetTargetDesc();\r\n  xml = XDocument.Parse(xml).ToString();\r\n}\r\n```\r\n","tagline":"An ADS protocol client library written in C#","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}